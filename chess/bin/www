#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mean-app:server');
var http = require('http');
var socketIO = require('socket.io');
var mongoose = require('mongoose');
var User = require('../models/User.js');
var allsockets = {};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = socketIO(server);

io.on('connection', (socket) => {
  console.log('New user connected');
  socket.on('disconnect', ()=>{
    console.log('User disconnected');
  });
  socket.on('username',function(name){
    console.log(name);
    allsockets[name] = socket;
    // allsockets[name].emit('checking',"printthis");
  });
  socket.on('sendmessage',function(obj){
    var matchid = obj.match_id;
    var whiteplayer = matchid.slice(0,(matchid.length)/2);
    var blackplayer = matchid.slice((matchid.length)/2,matchid.length);
    if(whiteplayer != obj.user_id)
    {
      allsockets[whiteplayer].emit('getmessage',obj);
    }
    else
    {
      allsockets[blackplayer].emit('getmessage',obj); 
    }
  });

  socket.on('makeMove',function(obj){
    var matchid = obj.matchId;
    var whiteplayer = matchid.slice(0,(matchid.length)/2);
    var blackplayer = matchid.slice((matchid.length)/2,matchid.length);
    // User.Allmatch.find({matchid:matchid},function(err,match){
    //   match[0].scoresheet.push(moveContent);
    //   match[0].save();
    // });
    if(whiteplayer != obj.userId)
    {
      allsockets[whiteplayer].emit('makeMove',obj);
    }
    else
    {
      allsockets[blackplayer].emit('makeMove',obj); 
    }
  });

  socket.on('sendresign',function(obj){
    var matchid = obj.match_id;
    var whiteplayer = matchid.slice(0,(matchid.length)/2);
    var blackplayer = matchid.slice((matchid.length)/2,matchid.length);

    if(whiteplayer != obj.user_id)
    {
      allsockets[whiteplayer].emit('acceptresign',obj);
    }
    else
    {
      allsockets[blackplayer].emit('acceptresign',obj); 
    }
  });

  socket.on('senddrawrequest',function(obj){
    var matchid = obj.match_id;
    var whiteplayer = matchid.slice(0,(matchid.length)/2);
    var blackplayer = matchid.slice((matchid.length)/2,matchid.length);

    if(whiteplayer != obj.user_id)
    {
      allsockets[whiteplayer].emit('getdrawrequest',obj);
    }
    else
    {
      allsockets[blackplayer].emit('getdrawrequest',obj); 
    }
  });

  socket.on('acceptdrawrequest',function(obj){
    var matchid = obj.match_id;
    var whiteplayer = matchid.slice(0,(matchid.length)/2);
    var blackplayer = matchid.slice((matchid.length)/2,matchid.length);

    if(whiteplayer != obj.user_id)
    {
      allsockets[whiteplayer].emit('accepteddraw',obj);
    }
    else
    {
      allsockets[blackplayer].emit('accepteddraw',obj); 
    }
  });





});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}